// üî• Serwis do zarzƒÖdzania spi≈ºarniami w Firebase

import {
  collection,
  doc,
  getDocs,
  getDoc,
  updateDoc,
  serverTimestamp,
  Timestamp,
  writeBatch
} from 'firebase/firestore';
import { db } from '../firebase';
import type { 
  SpizarniaMetadata, 
  SpizarniaCz≈Çonek, 
  UserSpizarnia,
  SpizarniaLokalizacja
} from '../types';
import { DOMYSLNE_LOKALIZACJE } from '../types';

export class SpizarniaService {
  
  // üìã Pobieranie listy spi≈ºarni u≈ºytkownika
  static async getUserSpi≈ºarnie(userId: string): Promise<{ id: string; data: UserSpizarnia; metadata: SpizarniaMetadata }[]> {
    try {
      console.log('SpizarniaService: Pobieranie spi≈ºarni dla u≈ºytkownika:', userId);
      
      // Pobierz wszystkie spi≈ºarnie u≈ºytkownika
      const userSpizarnieRef = collection(db, 'users', userId, 'spi≈ºarnie');
      const userSpizarnieSnapshot = await getDocs(userSpizarnieRef);
      
      const spi≈ºarnie = [];
      
      // Dla ka≈ºdej spi≈ºarni pobierz metadane
      for (const userSpizarniaDoc of userSpizarnieSnapshot.docs) {
        const spizarniaId = userSpizarniaDoc.id;
        const userData = userSpizarniaDoc.data() as UserSpizarnia;
        
        // Pobierz metadane spi≈ºarni
        const spizarniaMetadataRef = doc(db, 'spi≈ºarnie', spizarniaId, 'metadata', 'info');
        const metadataDoc = await getDoc(spizarniaMetadataRef);
        
        if (metadataDoc.exists()) {
          spi≈ºarnie.push({
            id: spizarniaId,
            data: userData,
            metadata: metadataDoc.data() as SpizarniaMetadata
          });
        }
      }
      
      console.log('SpizarniaService: Pobrano spi≈ºarnie:', spi≈ºarnie);
      return spi≈ºarnie;
      
    } catch (error) {
      console.error('SpizarniaService: B≈ÇƒÖd pobierania spi≈ºarni:', error);
      throw error;
    }
  }
  
  // ‚ûï Tworzenie nowej spi≈ºarni
  static async createSpi≈ºarnia(
    userId: string, 
    nazwa: string, 
    opis?: string,
    typ: 'osobista' | 'wsp√≥lna' = 'osobista',
    ikona?: string
  ): Promise<string> {
    try {
      console.log('SpizarniaService: Tworzenie nowej spi≈ºarni:', { nazwa, typ });
      
      const batch = writeBatch(db);
      
      // 1. Utw√≥rz nowƒÖ spi≈ºarniƒô
      const spizarniaRef = doc(collection(db, 'spi≈ºarnie'));
      const spizarniaId = spizarniaRef.id;
      
      // 2. Metadane spi≈ºarni z domy≈õlnymi lokalizacjami
      const metadataRef = doc(db, 'spi≈ºarnie', spizarniaId, 'metadata', 'info');
      
      // Przygotuj domy≈õlne lokalizacje z ID i timestampami
      const domyslneLokalizacje: SpizarniaLokalizacja[] = DOMYSLNE_LOKALIZACJE.map((lok, index) => ({
        id: `default-${index}-${Date.now()}`,
        ...lok,
        createdAt: Timestamp.fromDate(new Date())
      }));
      
      const metadataData: SpizarniaMetadata = {
        nazwa,
        opis,
        typ,
        w≈Ça≈õciciel: userId,
        createdAt: serverTimestamp() as Timestamp,
        updatedAt: serverTimestamp() as Timestamp,
        ikona: ikona || 'üè†',
        lokalizacje: domyslneLokalizacje, // Dodaj domy≈õlne lokalizacje
        ustawienia: {
          powiadomieniaOWa≈ºno≈õci: true,
          dziPrzedWa≈ºno≈õciƒÖ: 3,
          publicznaWidoczno≈õƒá: false
        }
      };
      batch.set(metadataRef, metadataData);
      
      // 3. Dodaj w≈Ça≈õciciela jako cz≈Çonka
      const czlonekRef = doc(db, 'spi≈ºarnie', spizarniaId, 'cz≈Çonkowie', userId);
      const cz≈ÇonekData: SpizarniaCz≈Çonek = {
        role: 'owner',
        joinedAt: serverTimestamp() as Timestamp,
        invitedBy: userId,
        permissions: {
          canAdd: true,
          canEdit: true,
          canDelete: true,
          canInvite: true
        }
      };
      batch.set(czlonekRef, cz≈ÇonekData);
      
      // 4. Dodaj spi≈ºarniƒô do listy u≈ºytkownika
      const userSpizarniaRef = doc(db, 'users', userId, 'spi≈ºarnie', spizarniaId);
      const userSpizarniaData: UserSpizarnia = {
        role: 'owner',
        joinedAt: serverTimestamp() as Timestamp
      };
      batch.set(userSpizarniaRef, userSpizarniaData);
      
      // Wykonaj wszystkie operacje atomowo
      await batch.commit();
      
      console.log('SpizarniaService: Utworzono spi≈ºarniƒô o ID:', spizarniaId);
      return spizarniaId;
      
    } catch (error) {
      console.error('SpizarniaService: B≈ÇƒÖd tworzenia spi≈ºarni:', error);
      throw error;
    }
  }
  
  // üìù Aktualizacja metadanych spi≈ºarni
  static async updateSpizarniaMetadata(
    spizarniaId: string, 
    userId: string,
    updates: Partial<SpizarniaMetadata>
  ): Promise<void> {
    try {
      console.log('SpizarniaService: Aktualizacja spi≈ºarni:', spizarniaId, updates);
      
      // Sprawd≈∫ uprawnienia u≈ºytkownika
      const hasPermission = await this.checkPermission(spizarniaId, userId, 'edit');
      if (!hasPermission) {
        throw new Error('Brak uprawnie≈Ñ do edycji spi≈ºarni');
      }
      
      const metadataRef = doc(db, 'spi≈ºarnie', spizarniaId, 'metadata', 'info');
      await updateDoc(metadataRef, {
        ...updates,
        updatedAt: serverTimestamp()
      });
      
      console.log('SpizarniaService: Zaktualizowano spi≈ºarniƒô');
      
    } catch (error) {
      console.error('SpizarniaService: B≈ÇƒÖd aktualizacji spi≈ºarni:', error);
      throw error;
    }
  }
  
  // üóëÔ∏è Usuwanie spi≈ºarni
  static async deleteSpizarnia(spizarniaId: string, userId: string): Promise<void> {
    try {
      console.log('SpizarniaService: Usuwanie spi≈ºarni:', spizarniaId);
      
      // Sprawd≈∫ czy u≈ºytkownik jest w≈Ça≈õcicielem
      const cz≈ÇonekRef = doc(db, 'spi≈ºarnie', spizarniaId, 'cz≈Çonkowie', userId);
      const cz≈ÇonekDoc = await getDoc(cz≈ÇonekRef);
      
      if (!cz≈ÇonekDoc.exists() || cz≈ÇonekDoc.data().role !== 'owner') {
        throw new Error('Tylko w≈Ça≈õciciel mo≈ºe usunƒÖƒá spi≈ºarniƒô');
      }

      // U≈ºyj batch do atomowego usuwania wszystkich dokument√≥w
      const batch = writeBatch(db);

      // 1. Usu≈Ñ spi≈ºarniƒô z kolekcji u≈ºytkownika
      const userSpizarniaRef = doc(db, 'users', userId, 'spi≈ºarnie', spizarniaId);
      batch.delete(userSpizarniaRef);

      // 2. Pobierz wszystkich cz≈Çonk√≥w i usu≈Ñ spi≈ºarniƒô z ich kolekcji
      const cz≈ÇonkowieRef = collection(db, 'spi≈ºarnie', spizarniaId, 'cz≈Çonkowie');
      const cz≈ÇonkowieSnapshot = await getDocs(cz≈ÇonkowieRef);
      
      for (const cz≈ÇonekDoc of cz≈ÇonkowieSnapshot.docs) {
        const cz≈ÇonekId = cz≈ÇonekDoc.id;
        const memberSpizarniaRef = doc(db, 'users', cz≈ÇonekId, 'spi≈ºarnie', spizarniaId);
        batch.delete(memberSpizarniaRef);
      }

      // 3. Usu≈Ñ metadane spi≈ºarni
      const metadataRef = doc(db, 'spi≈ºarnie', spizarniaId, 'metadata', 'info');
      batch.delete(metadataRef);

      // 4. Usu≈Ñ wszystkich cz≈Çonk√≥w
      for (const cz≈ÇonekDoc of cz≈ÇonkowieSnapshot.docs) {
        batch.delete(cz≈ÇonekDoc.ref);
      }

      // 5. Pobierz i usu≈Ñ wszystkie produkty
      const produktyRef = collection(db, 'spi≈ºarnie', spizarniaId, 'produkty');
      const produktySnapshot = await getDocs(produktyRef);
      
      for (const produktDoc of produktySnapshot.docs) {
        batch.delete(produktDoc.ref);
      }

      // 6. Usu≈Ñ g≈Ç√≥wny dokument spi≈ºarni (folder)
      // Firestore automatycznie usuwa puste kolekcje

      // Wykonaj wszystkie operacje atomowo
      await batch.commit();
      
      console.log('SpizarniaService: Pomy≈õlnie usuniƒôto spi≈ºarniƒô:', spizarniaId);
      
    } catch (error) {
      console.error('SpizarniaService: B≈ÇƒÖd usuwania spi≈ºarni:', error);
      throw error;
    }
  }
  
  // üë• Pobieranie cz≈Çonk√≥w spi≈ºarni
  static async getSpizarniaCz≈Çonkowie(spizarniaId: string): Promise<{ id: string; data: SpizarniaCz≈Çonek }[]> {
    try {
      const cz≈ÇonkowieRef = collection(db, 'spi≈ºarnie', spizarniaId, 'cz≈Çonkowie');
      const snapshot = await getDocs(cz≈ÇonkowieRef);
      
      return snapshot.docs.map(doc => ({
        id: doc.id,
        data: doc.data() as SpizarniaCz≈Çonek
      }));
      
    } catch (error) {
      console.error('SpizarniaService: B≈ÇƒÖd pobierania cz≈Çonk√≥w:', error);
      throw error;
    }
  }
  
  // üîí Sprawdzanie uprawnie≈Ñ
  static async checkPermission(
    spizarniaId: string, 
    userId: string, 
    action: 'view' | 'add' | 'edit' | 'delete' | 'invite'
  ): Promise<boolean> {
    try {
      const cz≈ÇonekRef = doc(db, 'spi≈ºarnie', spizarniaId, 'cz≈Çonkowie', userId);
      const cz≈ÇonekDoc = await getDoc(cz≈ÇonekRef);
      
      if (!cz≈ÇonekDoc.exists()) {
        return false;
      }
      
      const cz≈ÇonekData = cz≈ÇonekDoc.data() as SpizarniaCz≈Çonek;
      
      // W≈Ça≈õciciel ma wszystkie uprawnienia
      if (cz≈ÇonekData.role === 'owner') {
        return true;
      }
      
      // Sprawd≈∫ konkretne uprawnienia
      switch (action) {
        case 'view':
          return true; // Wszyscy cz≈Çonkowie mogƒÖ przeglƒÖdaƒá
        case 'add':
          return cz≈ÇonekData.permissions.canAdd;
        case 'edit':
          return cz≈ÇonekData.permissions.canEdit;
        case 'delete':
          return cz≈ÇonekData.permissions.canDelete;
        case 'invite':
          return cz≈ÇonekData.permissions.canInvite;
        default:
          return false;
      }
      
    } catch (error) {
      console.error('SpizarniaService: B≈ÇƒÖd sprawdzania uprawnie≈Ñ:', error);
      return false;
    }
  }
  
  // üìä Pobieranie statystyk spi≈ºarni
  static async getSpizarniaStats() {
    try {
      // TODO: Implementacja statystyk
      // - liczba produkt√≥w
      // - produkty wygasajƒÖce
      // - ostatnia aktywno≈õƒá
      // - warto≈õƒá spi≈ºarni
      
      return {
        totalProducts: 0,
        expiringProducts: 0,
        overdueProducts: 0,
        totalValue: 0
      };
      
    } catch (error) {
      console.error('SpizarniaService: B≈ÇƒÖd pobierania statystyk:', error);
      throw error;
    }
  }
}

export default SpizarniaService;
