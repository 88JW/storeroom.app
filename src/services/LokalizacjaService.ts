// üìç Serwis do zarzƒÖdzania lokalizacjami w spi≈ºarni

import {
  doc,
  updateDoc,
  serverTimestamp,
  arrayUnion,
  arrayRemove,
  Timestamp
} from 'firebase/firestore';
import { db } from '../firebase';
import type { SpizarniaLokalizacja } from '../types';
import { SpizarniaService } from './SpizarniaService';
import { ProduktService } from './ProduktService';

export class LokalizacjaService {
  
  // ‚ûï Dodawanie nowej lokalizacji do spi≈ºarni
  static async addLokalizacja(
    spizarniaId: string,
    userId: string,
    lokalizacjaData: Omit<SpizarniaLokalizacja, 'id' | 'createdAt'>
  ): Promise<SpizarniaLokalizacja> {
    try {
      console.log('LokalizacjaService: Dodawanie lokalizacji:', lokalizacjaData);
      
      // Sprawd≈∫ uprawnienia
      const hasPermission = await SpizarniaService.checkPermission(spizarniaId, userId, 'edit');
      if (!hasPermission) {
        throw new Error('Brak uprawnie≈Ñ do edycji tej spi≈ºarni');
      }
      
      // Walidacja wymaganych p√≥l
      if (!lokalizacjaData.nazwa || lokalizacjaData.nazwa.trim() === '') {
        throw new Error('Nazwa lokalizacji jest wymagana');
      }
      
      // Walidacja i czyszczenie danych (usu≈Ñ undefined values)
      const cleanedData = Object.fromEntries(
        Object.entries(lokalizacjaData).filter(([, value]) => value !== undefined)
      ) as Omit<SpizarniaLokalizacja, 'id' | 'createdAt'>;
      
      // Zapewnij domy≈õlne warto≈õci dla opcjonalnych p√≥l
      const dataWithDefaults = {
        nazwa: cleanedData.nazwa,
        ikona: cleanedData.ikona || 'üì¶',
        kolor: cleanedData.kolor || '#2196F3',
        opis: cleanedData.opis || ''
      };
      
      // Utw√≥rz nowƒÖ lokalizacjƒô z unikalnym ID
      const nowaLokalizacja: SpizarniaLokalizacja = {
        id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
        ...dataWithDefaults,
        createdAt: Timestamp.fromDate(new Date())
      };
      
      // Dodaj do metadanych spi≈ºarni
      const metadataRef = doc(db, 'spi≈ºarnie', spizarniaId, 'metadata', 'info');
      await updateDoc(metadataRef, {
        lokalizacje: arrayUnion(nowaLokalizacja),
        updatedAt: serverTimestamp()
      });
      
      console.log('LokalizacjaService: Dodano lokalizacjƒô:', nowaLokalizacja.id);
      return nowaLokalizacja;
      
    } catch (error) {
      console.error('LokalizacjaService: B≈ÇƒÖd dodawania lokalizacji:', error);
      throw error;
    }
  }
  
  // üìù Aktualizacja lokalizacji
  static async updateLokalizacja(
    spizarniaId: string,
    userId: string,
    lokalizacjaId: string,
    updates: Partial<Omit<SpizarniaLokalizacja, 'id' | 'createdAt'>>
  ): Promise<void> {
    try {
      console.log('LokalizacjaService: Aktualizacja lokalizacji:', lokalizacjaId, updates);
      
      // Walidacja i czyszczenie danych (usu≈Ñ undefined values)
      const cleanedUpdates = Object.fromEntries(
        Object.entries(updates).filter(([, value]) => value !== undefined)
      ) as Partial<Omit<SpizarniaLokalizacja, 'id' | 'createdAt'>>;
      
      // Sprawd≈∫ uprawnienia
      const hasPermission = await SpizarniaService.checkPermission(spizarniaId, userId, 'edit');
      if (!hasPermission) {
        throw new Error('Brak uprawnie≈Ñ do edycji tej spi≈ºarni');
      }
      
      // Pobierz aktualne metadane
      const userSpizarnie = await SpizarniaService.getUserSpi≈ºarnie(userId);
      const spizarnia = userSpizarnie.find(s => s.id === spizarniaId);
      
      if (!spizarnia || !spizarnia.metadata.lokalizacje) {
        throw new Error('Nie znaleziono spi≈ºarni lub lokalizacji');
      }
      
      // Znajd≈∫ i zaktualizuj lokalizacjƒô
      const zaktualizowaneLokalizacje = spizarnia.metadata.lokalizacje.map(lok => {
        if (lok.id === lokalizacjaId) {
          return { ...lok, ...cleanedUpdates };
        }
        return lok;
      });
      
      // Zapisz zmiany
      const metadataRef = doc(db, 'spi≈ºarnie', spizarniaId, 'metadata', 'info');
      await updateDoc(metadataRef, {
        lokalizacje: zaktualizowaneLokalizacje,
        updatedAt: serverTimestamp()
      });
      
      console.log('LokalizacjaService: Zaktualizowano lokalizacjƒô');
      
    } catch (error) {
      console.error('LokalizacjaService: B≈ÇƒÖd aktualizacji lokalizacji:', error);
      throw error;
    }
  }
  
  // üóëÔ∏è Usuwanie lokalizacji
  static async deleteLokalizacja(
    spizarniaId: string,
    userId: string,
    lokalizacjaId: string
  ): Promise<void> {
    try {
      console.log('LokalizacjaService: Usuwanie lokalizacji:', lokalizacjaId);
      
      // Sprawd≈∫ uprawnienia
      const hasPermission = await SpizarniaService.checkPermission(spizarniaId, userId, 'edit');
      if (!hasPermission) {
        throw new Error('Brak uprawnie≈Ñ do edycji tej spi≈ºarni');
      }
      
      // Sprawd≈∫ czy sƒÖ produkty w tej lokalizacji
      const produkty = await ProduktService.getProdukty(spizarniaId, userId, {
        lokalizacja: lokalizacjaId
      });
      
      if (produkty.length > 0) {
        throw new Error(`Nie mo≈ºna usunƒÖƒá lokalizacji. Znajduje siƒô w niej ${produkty.length} produkt√≥w. Najpierw przenie≈õ lub usu≈Ñ produkty.`);
      }
      
      // Pobierz aktualne metadane
      const userSpizarnie = await SpizarniaService.getUserSpi≈ºarnie(userId);
      const spizarnia = userSpizarnie.find(s => s.id === spizarniaId);
      
      if (!spizarnia || !spizarnia.metadata.lokalizacje) {
        throw new Error('Nie znaleziono spi≈ºarni lub lokalizacji');
      }
      
      // Znajd≈∫ lokalizacjƒô do usuniƒôcia
      const lokalizacjaDoUsuniecia = spizarnia.metadata.lokalizacje.find(lok => lok.id === lokalizacjaId);
      if (!lokalizacjaDoUsuniecia) {
        throw new Error('Nie znaleziono lokalizacji');
      }
      
      // Usu≈Ñ lokalizacjƒô
      const metadataRef = doc(db, 'spi≈ºarnie', spizarniaId, 'metadata', 'info');
      await updateDoc(metadataRef, {
        lokalizacje: arrayRemove(lokalizacjaDoUsuniecia),
        updatedAt: serverTimestamp()
      });
      
      console.log('LokalizacjaService: Usuniƒôto lokalizacjƒô');
      
    } catch (error) {
      console.error('LokalizacjaService: B≈ÇƒÖd usuwania lokalizacji:', error);
      throw error;
    }
  }
  
  // üìã Pobieranie lokalizacji spi≈ºarni
  static async getLokalizacje(
    spizarniaId: string,
    userId: string
  ): Promise<SpizarniaLokalizacja[]> {
    try {
      // Sprawd≈∫ uprawnienia
      const hasPermission = await SpizarniaService.checkPermission(spizarniaId, userId, 'view');
      if (!hasPermission) {
        throw new Error('Brak uprawnie≈Ñ do przeglƒÖdania tej spi≈ºarni');
      }
      
      // Pobierz metadane spi≈ºarni
      const userSpizarnie = await SpizarniaService.getUserSpi≈ºarnie(userId);
      const spizarnia = userSpizarnie.find(s => s.id === spizarniaId);
      
      if (!spizarnia) {
        throw new Error('Nie znaleziono spi≈ºarni');
      }
      
      return spizarnia.metadata.lokalizacje || [];
      
    } catch (error) {
      console.error('LokalizacjaService: B≈ÇƒÖd pobierania lokalizacji:', error);
      throw error;
    }
  }
  
  // üîç Znajd≈∫ lokalizacjƒô po ID
  static async findLokalizacjaById(
    spizarniaId: string,
    userId: string,
    lokalizacjaId: string
  ): Promise<SpizarniaLokalizacja | null> {
    try {
      const lokalizacje = await this.getLokalizacje(spizarniaId, userId);
      return lokalizacje.find(lok => lok.id === lokalizacjaId) || null;
      
    } catch (error) {
      console.error('LokalizacjaService: B≈ÇƒÖd znajdowania lokalizacji:', error);
      return null;
    }
  }
  
  // üìä Statystyki lokalizacji (liczba produkt√≥w w ka≈ºdej)
  static async getLokalizacjeStatystyki(
    spizarniaId: string,
    userId: string
  ): Promise<Record<string, { lokalizacja: SpizarniaLokalizacja; liczbaProduktow: number }>> {
    try {
      const lokalizacje = await this.getLokalizacje(spizarniaId, userId);
      const statystyki: Record<string, { lokalizacja: SpizarniaLokalizacja; liczbaProduktow: number }> = {};
      
      // Dla ka≈ºdej lokalizacji policz produkty
      for (const lokalizacja of lokalizacje) {
        const produkty = await ProduktService.getProdukty(spizarniaId, userId, {
          lokalizacja: lokalizacja.id
        });
        
        statystyki[lokalizacja.id] = {
          lokalizacja,
          liczbaProduktow: produkty.length
        };
      }
      
      return statystyki;
      
    } catch (error) {
      console.error('LokalizacjaService: B≈ÇƒÖd pobierania statystyk lokalizacji:', error);
      throw error;
    }
  }
}

export default LokalizacjaService;
