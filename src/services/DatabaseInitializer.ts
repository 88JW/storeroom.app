// üî• Narzƒôdzie do inicjalizacji bazy danych Firebase

import { 
  doc, 
  setDoc, 
  collection, 
  addDoc,
  serverTimestamp,
  writeBatch,
  Timestamp,
  FieldValue
} from 'firebase/firestore';
import { db } from '../firebase';
import type { 
  SpizarniaMetadata, 
  SpizarniaCz≈Çonek, 
  UserSpizarnia, 
  UserProfile,
  Produkt 
} from '../types';

export class DatabaseInitializer {
  
  // üèóÔ∏è G≈Ç√≥wna funkcja inicjalizacji bazy dla u≈ºytkownika
  static async initializeUserDatabase(userId: string, userEmail: string, userName: string = 'U≈ºytkownik'): Promise<void> {
    try {
      console.log('üî• DatabaseInitializer: Inicjalizacja bazy dla u≈ºytkownika:', userId);
      
      // 1. Utw√≥rz profil u≈ºytkownika
      await this.createUserProfile(userId, userEmail, userName);
      
      // 2. Utw√≥rz pierwszƒÖ spi≈ºarniƒô
      const spizarniaId = await this.createFirstSpizarnia(userId);
      
      // 3. Dodaj przyk≈Çadowe produkty
      await this.addSampleProducts(spizarniaId, userId);
      
      console.log('‚úÖ DatabaseInitializer: Baza danych zosta≈Ça zainicjalizowana!');
      
    } catch (error) {
      console.error('‚ùå DatabaseInitializer: B≈ÇƒÖd inicjalizacji bazy:', error);
      throw error;
    }
  }
  
  // üë§ Tworzenie profilu u≈ºytkownika
  private static async createUserProfile(userId: string, email: string, displayName: string): Promise<void> {
    try {
      console.log('üë§ Tworzenie profilu u≈ºytkownika...');
      
      const userProfile: UserProfile = {
        email,
        displayName,
        createdAt: serverTimestamp() as any,
        lastLoginAt: serverTimestamp() as any
      };
      
      await setDoc(doc(db, 'users', userId, 'profile', 'info'), userProfile);
      console.log('‚úÖ Profil u≈ºytkownika utworzony');
      
    } catch (error) {
      console.error('‚ùå B≈ÇƒÖd tworzenia profilu:', error);
      throw error;
    }
  }
  
  // üè† Tworzenie pierwszej spi≈ºarni
  private static async createFirstSpizarnia(userId: string): Promise<string> {
    try {
      console.log('üè† Tworzenie pierwszej spi≈ºarni...');
      
      const batch = writeBatch(db);
      
      // Generuj ID dla spi≈ºarni
      const spizarniaRef = doc(collection(db, 'spi≈ºarnie'));
      const spizarniaId = spizarniaRef.id;
      
      // 1. Metadane spi≈ºarni
      const metadataRef = doc(db, 'spi≈ºarnie', spizarniaId, 'metadata', 'info');
      const metadataData: SpizarniaMetadata = {
        nazwa: 'Moja pierwsza spi≈ºarnia',
        opis: 'Domowa spi≈ºarnia utworzona automatycznie',
        typ: 'osobista',
        w≈Ça≈õciciel: userId,
        createdAt: serverTimestamp() as any,
        updatedAt: serverTimestamp() as any,
        ikona: 'üè†',
        ustawienia: {
          powiadomieniaOWa≈ºno≈õci: true,
          dziPrzedWa≈ºno≈õciƒÖ: 3,
          publicznaWidoczno≈õƒá: false
        }
      };
      batch.set(metadataRef, metadataData);
      
      // 2. W≈Ça≈õciciel jako cz≈Çonek
      const cz≈ÇonekRef = doc(db, 'spi≈ºarnie', spizarniaId, 'cz≈Çonkowie', userId);
      const cz≈ÇonekData: SpizarniaCz≈Çonek = {
        role: 'owner',
        joinedAt: serverTimestamp() as any,
        invitedBy: userId,
        permissions: {
          canAdd: true,
          canEdit: true,
          canDelete: true,
          canInvite: true
        }
      };
      batch.set(cz≈ÇonekRef, cz≈ÇonekData);
      
      // 3. Spi≈ºarnia w profilu u≈ºytkownika
      const userSpizarniaRef = doc(db, 'users', userId, 'spi≈ºarnie', spizarniaId);
      const userSpizarniaData: UserSpizarnia = {
        role: 'owner',
        joinedAt: serverTimestamp() as any
      };
      batch.set(userSpizarniaRef, userSpizarniaData);
      
      await batch.commit();
      
      console.log('‚úÖ Pierwsza spi≈ºarnia utworzona, ID:', spizarniaId);
      return spizarniaId;
      
    } catch (error) {
      console.error('‚ùå B≈ÇƒÖd tworzenia spi≈ºarni:', error);
      throw error;
    }
  }
  
  // üõí Dodawanie przyk≈Çadowych produkt√≥w
  private static async addSampleProducts(spizarniaId: string, userId: string): Promise<void> {
    try {
      console.log('üõí Dodawanie przyk≈Çadowych produkt√≥w...');
      
      const produktyRef = collection(db, 'spi≈ºarnie', spizarniaId, 'produkty');
      
      // Przyk≈Çadowe produkty
      const sampleProdukty = [
        {
          nazwa: 'Mleko',
          kategoria: 'Nabia≈Ç',
          podkategoria: 'Mleko',
          ilo≈õƒá: 2,
          jednostka: 'l',
          dataWa≈ºno≈õci: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // Za 3 dni
          lokalizacja: 'lod√≥wka',
          status: 'dostƒôpny',
          notatki: 'Mleko pe≈Çnot≈Çuste 3,2%'
        },
        {
          nazwa: 'Chleb',
          kategoria: 'Pieczywo',
          podkategoria: 'Chleb',
          ilo≈õƒá: 1,
          jednostka: 'szt',
          dataWa≈ºno≈õci: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000), // Za 2 dni
          lokalizacja: 'szafka',
          status: 'dostƒôpny',
          notatki: 'Chleb ≈ºytni'
        },
        {
          nazwa: 'Jajka',
          kategoria: 'Nabia≈Ç',
          podkategoria: 'Jajka',
          ilo≈õƒá: 12,
          jednostka: 'szt',
          dataWa≈ºno≈õci: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000), // Za 10 dni
          lokalizacja: 'lod√≥wka',
          status: 'dostƒôpny',
          notatki: 'Jajka kurze, rozmiar L'
        },
        {
          nazwa: 'Ser ≈º√≥≈Çty',
          kategoria: 'Nabia≈Ç',
          podkategoria: 'Ser',
          ilo≈õƒá: 250,
          jednostka: 'g',
          dataWa≈ºno≈õci: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // Za 14 dni
          lokalizacja: 'lod√≥wka',
          status: 'dostƒôpny',
          notatki: 'Ser gouda'
        },
        {
          nazwa: 'Mas≈Ço',
          kategoria: 'Nabia≈Ç',
          podkategoria: 'Mas≈Ço',
          ilo≈õƒá: 1,
          jednostka: 'opak',
          dataWa≈ºno≈õci: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // Za 30 dni
          lokalizacja: 'lod√≥wka',
          status: 'dostƒôpny',
          notatki: 'Mas≈Ço ekstra'
        }
      ];
      
      // Dodaj wszystkie produkty
      for (const produktData of sampleProdukty) {
        const produkt: Omit<Produkt, 'id'> = {
          ...produktData,
          dataDodania: serverTimestamp() as any,
          dataModyfikacji: serverTimestamp() as any,
          dodanePrzez: userId
        };
        
        await addDoc(produktyRef, produkt);
      }
      
      console.log('‚úÖ Dodano', sampleProdukty.length, 'przyk≈Çadowych produkt√≥w');
      
    } catch (error) {
      console.error('‚ùå B≈ÇƒÖd dodawania produkt√≥w:', error);
      throw error;
    }
  }
  
  // üîç Sprawdzenie czy u≈ºytkownik ma ju≈º zainicjalizowanƒÖ bazƒô
  static async isDatabaseInitialized(userId: string): Promise<boolean> {
    try {
      const profileRef = doc(db, 'users', userId, 'profile', 'info');
      const profileDoc = await import('firebase/firestore').then(({ getDoc }) => getDoc(profileRef));
      
      return profileDoc.exists();
      
    } catch (error) {
      console.error('‚ùå B≈ÇƒÖd sprawdzania inicjalizacji:', error);
      return false;
    }
  }
  
  // üßπ Czyszczenie bazy dla u≈ºytkownika (do test√≥w)
  static async clearUserDatabase(userId: string): Promise<void> {
    try {
      console.log('üßπ Czyszczenie bazy danych u≈ºytkownika...');
      
      // TODO: Implementacja czyszczenia
      // W produkcji powinna byƒá Cloud Function
      console.log('‚ö†Ô∏è Czyszczenie bazy nie jest jeszcze zaimplementowane');
      
    } catch (error) {
      console.error('‚ùå B≈ÇƒÖd czyszczenia bazy:', error);
      throw error;
    }
  }
}

export default DatabaseInitializer;
